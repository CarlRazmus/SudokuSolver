package Main;

import java.util.ArrayList;
import java.util.Random;

import javax.swing.plaf.SeparatorUI;

public class SudokuGenerator
{
	SudokuBoard board;
	
	public SudokuGenerator()
	{
		board = new SudokuBoard();
	}
	
	
	public SudokuBoard generateRandomBoard(int amountOfknownStartNumbers)
	{
		if(recursiveFindBoard(0, 0))
		{
			System.out.println("successfully generated a SUDOKU BOARD");
			board.printBoard();
		}
		else
		{
			board = null;
			
			System.out.println("unsuccessful generating of sudoku board");
		}
		
		return board;
	}
	
	private boolean recursiveFindBoard(int row, int column)
	{
		if(row == 9) //this row doesn't exist, it is sent when the board is full -> check for solution
		{
			return board.isSolution();
		}
		
		ArrayList<Integer> validNumbers;
		Random r;
		int randomNumber;
		int nrIterations;
		int nextRow;
		int nextColumn;

		validNumbers = board.getValidNumbers(row, column);
		nrIterations = validNumbers.size();

		r = new Random();
		
		for(int currentIteration = 0; currentIteration < nrIterations; currentIteration++)
		{
			if(validNumbers.size() == 0) // no more valid numbers exists, fall back to the last recursion.
				return false;
			
			randomNumber = r.nextInt(validNumbers.size());
			validNumbers.remove(randomNumber); //removes the randomly picked number from the list so that it cannot be picked again
			
			board.setValue(row, column, randomNumber);
			
			nextColumn = column + 1;
			nextRow = row;
			
			if(nextColumn == 9)
			{
				nextColumn = 0;
				nextRow++;
			}
			
			if(recursiveFindBoard(nextRow, nextColumn))
				return true;
			else
			{
				board.setUnassigned(row, column);
			}
		}
		
		return false;
	}
	
}