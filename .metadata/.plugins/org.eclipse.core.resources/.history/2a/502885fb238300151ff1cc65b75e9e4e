package SolverAlgorithms;

import java.awt.Color;
import java.awt.GridLayout;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

import Main.BoardPosition;

public class GraphicalSudokuBoard extends JFrame{

    /**
     * 
     */
    private static final long serialVersionUID = 0;
    private JTextField f[][]= new JTextField[9][9] ;
    private JPanel p[][]= new JPanel [3][3];

    // A list of all positions that should be reset to normal layout at the new board update
    ArrayList<BoardPosition> toBeClearedList = new ArrayList<BoardPosition>();
    
    
    public GraphicalSudokuBoard()
	{
	    super("Sudoku");

        for(int row=0; row<=8; row++){
            for(int column=0; column<=8; column++){
            	JTextField textField = new JTextField(1);
            	textField.setHorizontalAlignment(JTextField.CENTER);
                f[row][column]=new JTextField(1);
            }
        }

        for(int row=0; row<=2; row++){
            for(int column=0; column<=2; column++){
                p[row][column]=new JPanel(new GridLayout(3,3));
            }
        }

        setLayout(new GridLayout(3,3,5,5));

        for(int groupRow=0; groupRow<=2; groupRow++){
            for(int groupColumn=0; groupColumn<=2; groupColumn++){    
                for(int row=0; row<=2; row++ ){
                    for(int column=0; column<=2; column++){
                        p[groupRow][groupColumn].add(f[row+groupRow*3][column+groupColumn*3]);
                    }
                }
            add(p[groupRow][groupColumn]);
            }
        }

    }
    
    public void setTileValue(int row, int column, int value){
    	
    	removeTemporaryTileBackgroundColors();
    	
    	f[row][column].setText(String.valueOf(value));
    	
    	addToTemporaryTileBackgroundColors(row, column, new Color(20, 200, 20, 100));
    }
    
    public void setBackgroundAsBlocked(int row, int column){

    	BoardPosition pos = new BoardPosition(row, column);
    	
    	f[pos.getRow()][pos.getColumn()].setBackground(Color.gray);
    }
    
    private void addToTemporaryTileBackgroundColors(int row, int column, Color color)
	{
    	BoardPosition pos = new BoardPosition(row, column);
    	
    	f[pos.getRow()][pos.getColumn()].setBackground(color);
	}

	private void removeTemporaryTileBackgroundColors(){
    	for(BoardPosition pos : toBeClearedList){
        	f[pos.getRow()][pos.getColumn()].setBackground(Color.white);
    	}
    }
    
}